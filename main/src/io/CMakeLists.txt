
function(enableH5Part exename)
    if(SPH_EXA_WITH_H5PART)
        target_compile_definitions(${exename} PUBLIC SPH_EXA_HAVE_H5PART)
        target_include_directories(${exename} PUBLIC ${PROJECT_SOURCE_DIR}/extern/h5part)

        # necessary because the HDF5_INLUCDE_DIRS is empty on CRAY and HIP-compilation is done without the cray-wrapper
        target_include_directories(${exename} PUBLIC $ENV{HDF5_DIR}/include)
        target_link_libraries(${exename} PRIVATE H5Part ${HDF5_LIBRARIES})
    endif()
endfunction()

function(enableH5Part exename)
    if(SPH_EXA_WITH_H5PART)
        target_compile_definitions(${exename} PUBLIC SPH_EXA_HAVE_H5PART)
        target_include_directories(${exename} PUBLIC ${PROJECT_SOURCE_DIR}/extern/h5part)

        # necessary because the HDF5_INLUCDE_DIRS is empty on CRAY and HIP-compilation is done without the cray-wrapper
        target_include_directories(${exename} PUBLIC $ENV{HDF5_DIR}/include)
        target_link_libraries(${exename} PRIVATE H5Part ${HDF5_LIBRARIES})
    endif()
endfunction()

function(enableH5ZZFP exename)
    if (SPH_EXA_WITH_HDF5)
        set(H5ZZFP_DIR ${PROJECT_SOURCE_DIR}/extern/h5zzfp)
        find_package(HDF5 REQUIRED)
        if (HDF5_FOUND)
            set(H5Z_ZFP_USE_STATIC_LIBS ON)
            target_compile_definitions(${exename} PUBLIC SPH_EXA_HAVE_HDF5)
            if(HDF5_IS_PARALLEL)
                find_package(MPI REQUIRED)
                target_compile_definitions(${exename} PUBLIC H5PART_PARALLEL_IO)
                target_include_directories(${exename} PRIVATE ${MPI_C_INCLUDE_DIRS})
                target_link_libraries(${exename} PRIVATE ${MPI_C_LIBRARIES})
            else()
                message("HDF5_IS_PARALLEL not found, Parallel HDF5 IO will not be enabled")
            endif()
            target_include_directories(${exename} PUBLIC ${HDF5_INCLUDE_DIRS} ${H5ZZFP_DIR})
            # Here H5Z-ZFP is used as a library
            target_link_libraries(${exename} PRIVATE h5z_zfp)
        else()
            message(STATUS "No HDF5 support")
            set(SPH_EXA_WITH_HDF5 OFF)
        endif ()
    endif()
endfunction()

function(enableADIOS exename)
    if (SPH_EXA_WITH_ADIOS)
        target_compile_definitions(${exename} PUBLIC SPH_EXA_HAVE_ADIOS)
        target_link_libraries(${exename} PRIVATE ${MPI_C_LIBRARIES} adios2::cxx11 adios2::cxx11_mpi)
        target_link_libraries(${exename} PRIVATE adios2::cxx11_mpi MPI::MPI_C)
    endif()
endfunction()

add_library(io ifile_io_ascii.cpp ifile_io_hdf5.cpp ifile_io_h5part.cpp ifile_io_adios.cpp)
target_include_directories(io PRIVATE ${CSTONE_DIR} ${MPI_CXX_INCLUDE_PATH})
target_link_libraries(io PRIVATE ${MPI_CXX_LIBRARIES})
enableH5Part(io)
enableADIOS(io)
